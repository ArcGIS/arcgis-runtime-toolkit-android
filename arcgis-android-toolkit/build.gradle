group = GROUP
version = VERSION_NAME

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
// We need the patched maven plugin since 'install' task is overriden by 'installDebugTest', see: https://github.com/dcendents/android-maven-plugin
apply plugin: 'android-maven'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 100
        versionName "100.2.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

gradle.projectsEvaluated {
    assembleDebug.dependsOn generateDebugDoclava
    assembleRelease.dependsOn generateReleaseDoclava
    artifactoryPublish.dependsOn assembleRelease
}

// custom configurations
// jaxDoclet is for building custom doclava doclet in javadocs
// published is for artifactory
configurations {
    jaxDoclet
    published
}

// create javadoc for build variants
android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()

    task("generate${name}Doclava", type: Javadoc) {
        // include custom templates
        def tpldir = new File("${project.docsDir}/${name}/doclava/templates")
        if (!tpldir.exists()) {
            if (!tpldir.mkdirs()) {
                println("mkdir failed: ${tpldir} ")
            }
        }

        copy {
            from("../doclava/templates") {
                include "*"
            }
            into(tpldir)
        }

        description "Generates Javadoc for $variant.name."
        source = variant.javaCompiler.source
        title = null
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(android.sourceSets.main.java.srcDirs, variant.javaCompiler.classpath.files, ext.androidJar)
        destinationDir = file("${project.docsDir}/${name}/doclava")
        failOnError = false
        options {
            docletpath = configurations.jaxDoclet.files as List
            doclet "com.google.doclava.Doclava"
            bootClasspath new File(System.getenv('JAVA_HOME') + "/jre/lib/rt.jar")
            addStringOption "XDignore.symbol.file", "-quiet"
            addStringOption "hdf project.name", "${project.name}"
            addStringOption "hdf date", "${buildDate()}"
            addStringOption "federate android", "https://developer.android.com/reference"
            addStringOption "federationxml android", "http://doclava.googlecode.com/svn/static/api/android-10.xml"
            addStringOption "federate JDK", "http://download.oracle.com/javase/6/docs/api/index.html?"
            addStringOption "federationxml JDK", "http://doclava.googlecode.com/svn/static/api/openjdk-6.xml"
            addStringOption "templatedir", "${project.docsDir}/${name}/doclava/templates"
            addStringOption "apixml", "${project.docsDir}/${name}/doclava/api-${project.version}.xml"
//            addStringOption "since doclava/api-100.2.0.xml", "100.2.0"
            addStringOption "apiversion", "${project.version}"
        }
        // exclude generated files
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        // exclude internal packages
        exclude '**/internal/**'
        options.addStringOption "apixml", "${project.docsDir}/${name}/doclava/api-${project.version}.xml"
    }
}

// snapshots publish to snapshots repo, release publish to arcgis repo
String localRepo = version.endsWith('SNAPSHOT') ? 'snapshots-local' : 'arcgis-local'

// add apache licese to POM
configure(install.repositories.mavenInstaller) {
    pom.project {
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
    }
}

artifactory {
    def artifactoryUsername = project.hasProperty('ARTIFACTORY_USER') ? ARTIFACTORY_USER : null
    def artifactoryPassword = project.hasProperty('ARTIFACTORY_PASSWORD') ? ARTIFACTORY_USER : null

    contextUrl = ARTIFACTORY_URL

    // disable publish task if artifactory credentials have not been set
    artifactoryPublish.enabled = artifactoryUsername && artifactoryPassword

    publish {
        repository {
            repoKey = localRepo //The artifactory repository key to publish to
            if (artifactoryUsername) {
                username = ARTIFACTORY_USER //The publisher user name, property taken from gradle.properties
            }
            if (artifactoryPassword) {
                password = ARTIFACTORY_PASSWORD //The publisher password, property taken from gradle.properties
            }
        }
        defaults {
            // artifacts to be published to Artifactory.
            publishConfigs('archives', 'published')
            publishArtifacts = true
            publishPom = true //Publish generated POM files to Artifactory (true by default)
            publishIvy = false //Publish generated Ivy descriptor files to Artifactory (true by default)
        }
    }
    resolve {
        repoKey = 'arcgis' //The Artifactory (preferably virtual) repository key to resolve from
    }
}

dependencies {
    // custom doclava doclet
    jaxDoclet 'com.google.doclava:doclava:1.0.6'
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation 'com.android.support:appcompat-v7:26.0.2'
    implementation 'com.esri.arcgisruntime:arcgis-android:100.1.0'
    testImplementation 'junit:junit:4.12'
}

// generate build date for use in javadoc meta-tags
static def buildDate() {
    def date = new Date()
    def formatDate = date.format('yyyy-MM-dd')
    return formatDate
}